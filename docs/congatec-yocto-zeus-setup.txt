README for setting up Yocto Project 3.0 (Zeus) for conga-QMX6 [Based on NXP]
==============================================================================

1. Setting up and building Yocto
------------------------------------

Installation in Ubuntu 18.04 64 bit [Clean install]

Install additional needed packages:

	$ sudo apt-get update
	$ sudo apt-get install curl gawk wget git-core diffstat unzip texinfo gcc-multilib \
		build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \
		xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev \
		pylint3 xterm libncurses-dev

Install the repo utility:

	$ mkdir ~/bin
	$ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
	$ chmod a+x ~/bin/repo

Config the local git:

	$ git config --global user.email "youremail"
	$ git config --global user.name "Your name"

To get the yocto recipes:

	$ PATH=${PATH}:~/bin
	$ mkdir ~/yocto
	$ cd ~/yocto
	$ ~/bin/repo init -u https://git.congatec.com/yocto_nxp/imx6-manifest.git -b cgtimx6__zeus-5.4.3-1.0.0

	$ ~/bin/repo sync

To config the build environment:

	$ MACHINE='cgtqmx6' DISTRO=fsl-imx-wayland source imx-setup-release.sh -b build
	  [ ! ] EULA accept needed for next step.


Different images can be built now:

- fsl-image-machine-test: A console-only image that includes gstreamer packages, Freescale's multimedia packages (VPU and GPU) when available, and test and benchmark applications.

- core-image-minimal: A small image that only allows a device to boot


To build the fsl-image-machine-test image use:

   $ bitbake fsl-image-machine-test

The process will take hours.

When it finishes the image will be located ~/yocto/build/tmp/deploy/images/cgtqmx6

1.1 Updating the sources
------------------------
In order to check and update the sources from the selected Yocto version:

	$ cd ~/yocto
	$ repo sync

Afterwards if anything is updated the image must be bitbaked again.


2. Transfer the root file system
---------------------------------

2.1. micro SD
--------------
In order to transfer the image to a uSD card, follow the next steps changing sdX for your detected device:

	$ cd ~/yocto/build/tmp/deploy/images/cgtqmx6/
	$ sudo dd if=/dev/zero of=/dev/sdX count=1000 bs=512
	$ sudo sfdisk --force -uM /dev/sdX <<EOF
		10,,83
		EOF
	$ sudo mkfs.ext3 -j /dev/sdX1
	$ sudo mount /dev/sdX1 /mnt
	$ sudo tar -xjvf fsl-image-machine-test-cgtqmx6.tar.bz2 -C /mnt
	$ sync
	$ sudo umount /dev/sdX1

ATTENTION:
	Do not use the auto generated sdcard image!
	This will create two partitions on the sd-card which is not supported / which will not boot.

At u-boot console, stop the autoboot pressing any key and adjust the environment settings accordingly:

	U-Boot> setenv mmcdev 0
	U-Boot> setenv mmcroot '/dev/mmcblk0p1 rootwait rw'
	U-Boot> saveenv
	U-Boot> reset

2.2. eMMC
----------
An uSD is needed as a bridge, then the first step is follow the steps of "Transfer the root file system to a micro SD card", and transfer the image tar.bz2 file to the micro SD with the following command:

	$ cd ~/yocto/build/tmp/deploy/images/cgtqmx6/
	$ sudo mount /dev/sdX1 /mnt
	$ sudo cp fsl-image-machine-test-cgtqmx6.tar.bz2 /mnt
	$ sync
	$ sudo umount /dev/sdX1

Boot the system and:

	$ dd if=/dev/zero of=/dev/mmcblk1 count=1000 bs=512
	$ echo -e "o\nn\np\n1\n\n\nw\n" | fdisk /dev/mmcblk1
	$ mkfs.ext3 -j /dev/mmcblk1p1
	$ mount /dev/mmcblk1p1 /mnt
	$ cd /
	$ tar -xjvf fsl-image-machine-test-cgtqmx6.tar.bz2 -C /mnt
	$ sync

Shutdown the system and remove the microSD card.

At u-boot console, stop the autoboot pressing any key and adjust the environment settings accordingly:

	U-Boot> setenv mmcdev 1
	U-Boot> setenv mmcroot '/dev/mmcblk1p1 rootwait rw'
	U-Boot> saveenv
	U-Boot> reset

2.3 external SD
---------------
In order to transfer the image to a SD card, follow the next steps changing sdX for your detected device:

	$ cd ~/yocto/build/tmp/deploy/images/cgtqmx6/
	$ sudo dd if=/dev/zero of=/dev/sdX count=1000 bs=512
	$ sudo sfdisk --force -uM /dev/sdX <<EOF
		10,,83
		EOF
	$ sudo mkfs.ext3 -j /dev/sdX1
	$ sudo mount /dev/sdX1 /mnt
	$ sudo tar -xjvf fsl-image-machine-test-cgtqmx6.tar.bz2 -C /mnt
	$ sync
	$ sudo umount /dev/sdX1

	ATTENTION:
	Do not use the auto generated sdcard image!
	This will create two partitions on the sd-card which is not supported / which will not boot.

At u-boot console, stop the autoboot pressing any key and adjust the environment settings accordingly:

	U-Boot> setenv mmcdev 2
	U-Boot> setenv mmcroot '/dev/mmcblk2p1 rootwait rw'
	U-Boot> saveenv
	U-Boot> reset

3. U-boot
---------

From this release onwards, Uboot 2016 is used.

To build the u-boot binaries use:

	$ bitbake u-boot

Two files are provided in the deploy folder "~/yocto/build/tmp/deploy/images/cgtqmx6/":

	SPL-cgtqmx6-2016.01-r0-cgtqmx6-2016.01-r0 and
	u-boot-cgtqmx6-2016.01-r0.img


We recommend to substitute the bootloader on the target module with the bootloader that is provided with the Manufacturing tool package.

ATTENTION: Updating the module with the wrong bootloader binary may lead to unpredictable behavior or may render the module permanently inoperable.



4. Remarks
-----------

4.1 Gstreamer / Camera
-----------------------
	Add "dmfc=3" to the kernel command line to use the camera with a gstreamer pipeline.

	At u-boot console, stop the autoboot pressing any key and adjust the environment settings
	accordingly. Example for micro SD:
		U-Boot> setenv mmcroot '/dev/mmcblk0p1 rootwait rw dmfc=3'
		U-Boot> saveenv
		U-Boot> reset

4.2 PCIe
---------
	PCIe is disabled by default.
	Add the following configuration options to the kernel defconfig to enable it:
		CONFIG_PCI=y
		CONFIG_PCIEPORTBUS=y
		CONFIG_PCI_IMX6=y
		CONFIG_PCI_MSI=y


(c) 2017, Alex de Cabo, congatec AG
(c) 2020, Georg Hartinger, congatec AG

